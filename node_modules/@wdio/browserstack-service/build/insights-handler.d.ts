import type { Frameworks } from '@wdio/types';
import type { BeforeCommandArgs, AfterCommandArgs } from '@wdio/reporter';
import type { Pickle, ITestCaseHookParameter } from './cucumber-types.js';
declare class _InsightsHandler {
    private _browser;
    private _framework?;
    private _tests;
    private _hooks;
    private _platformMeta;
    private _commands;
    private _gitConfigPath?;
    private _suiteFile?;
    private _requestQueueHandler;
    constructor(_browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser, isAppAutomate?: boolean, _framework?: string | undefined);
    setSuiteFile(filename: string): void;
    before(): Promise<void>;
    beforeHook(test: Frameworks.Test, context: any): Promise<void>;
    afterHook(test: Frameworks.Test, result: Frameworks.TestResult): Promise<void>;
    beforeTest(test: Frameworks.Test): Promise<void>;
    afterTest(test: Frameworks.Test, result: Frameworks.TestResult): Promise<void>;
    /**
      * Cucumber Only
      */
    beforeScenario(world: ITestCaseHookParameter): Promise<void>;
    afterScenario(world: ITestCaseHookParameter): Promise<void>;
    beforeStep(step: Frameworks.PickleStep, scenario: Pickle): Promise<void>;
    afterStep(step: Frameworks.PickleStep, scenario: Pickle, result: Frameworks.PickleResult): Promise<void>;
    uploadPending(waitTimeout?: number, waitInterval?: number): Promise<unknown>;
    teardown(): Promise<void>;
    /**
     * misc methods
     */
    browserCommand(commandType: string, args: BeforeCommandArgs & AfterCommandArgs, test?: Frameworks.Test | ITestCaseHookParameter): Promise<void>;
    private attachHookData;
    private getHierarchy;
    private sendTestRunEvent;
    private sendTestRunEventForCucumber;
    private getIntegrationsObject;
    private getIdentifier;
}
declare const InsightsHandler: typeof _InsightsHandler;
type InsightsHandler = _InsightsHandler;
export default InsightsHandler;
//# sourceMappingURL=insights-handler.d.ts.map